// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesos/scheduler.proto

/*
Package mesos is a generated protocol buffer package.

It is generated from these files:
	mesos/scheduler.proto

It has these top-level messages:
	SubRequest
	FrameworkInfo
	SubReply
*/
package mesos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Possible call types, followed by message definitions if
// applicable.
type SubRequest_Type int32

const (
	// See comments above on `Event::Type` for more details on this enum value.
	SubRequest_UNKNOWN                SubRequest_Type = 0
	SubRequest_SUBSCRIBE              SubRequest_Type = 1
	SubRequest_TEARDOWN               SubRequest_Type = 2
	SubRequest_ACCEPT                 SubRequest_Type = 3
	SubRequest_DECLINE                SubRequest_Type = 4
	SubRequest_ACCEPT_INVERSE_OFFERS  SubRequest_Type = 13
	SubRequest_DECLINE_INVERSE_OFFERS SubRequest_Type = 14
	SubRequest_REVIVE                 SubRequest_Type = 5
	SubRequest_KILL                   SubRequest_Type = 6
	SubRequest_SHUTDOWN               SubRequest_Type = 7
	SubRequest_ACKNOWLEDGE            SubRequest_Type = 8
	SubRequest_RECONCILE              SubRequest_Type = 9
	SubRequest_MESSAGE                SubRequest_Type = 10
	SubRequest_REQUEST                SubRequest_Type = 11
	SubRequest_SUPPRESS               SubRequest_Type = 12
)

var SubRequest_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SUBSCRIBE",
	2:  "TEARDOWN",
	3:  "ACCEPT",
	4:  "DECLINE",
	13: "ACCEPT_INVERSE_OFFERS",
	14: "DECLINE_INVERSE_OFFERS",
	5:  "REVIVE",
	6:  "KILL",
	7:  "SHUTDOWN",
	8:  "ACKNOWLEDGE",
	9:  "RECONCILE",
	10: "MESSAGE",
	11: "REQUEST",
	12: "SUPPRESS",
}
var SubRequest_Type_value = map[string]int32{
	"UNKNOWN":                0,
	"SUBSCRIBE":              1,
	"TEARDOWN":               2,
	"ACCEPT":                 3,
	"DECLINE":                4,
	"ACCEPT_INVERSE_OFFERS":  13,
	"DECLINE_INVERSE_OFFERS": 14,
	"REVIVE":                 5,
	"KILL":                   6,
	"SHUTDOWN":               7,
	"ACKNOWLEDGE":            8,
	"RECONCILE":              9,
	"MESSAGE":                10,
	"REQUEST":                11,
	"SUPPRESS":               12,
}

func (x SubRequest_Type) Enum() *SubRequest_Type {
	p := new(SubRequest_Type)
	*p = x
	return p
}
func (x SubRequest_Type) String() string {
	return proto.EnumName(SubRequest_Type_name, int32(x))
}
func (x *SubRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SubRequest_Type_value, data, "SubRequest_Type")
	if err != nil {
		return err
	}
	*x = SubRequest_Type(value)
	return nil
}
func (SubRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// // The request message containing the FW's info.
// message SubRequest {
//     // Commenting `type` out as it looks like Mesos doesn't explicitly have it here
//     required string type = 1;
//     required FrameworkInfo framework = 2;
//     }
// From Mesos 1.3.0
// message Call {
type SubRequest struct {
	// Type of the call, indicates which optional field below should be
	// present if that type has a nested message definition.
	// See comments on `Event::Type` above on the reasoning behind this field being optional.
	Type             *SubRequest_Type      `protobuf:"varint,2,opt,name=type,enum=mesos.SubRequest_Type" json:"type,omitempty"`
	Subscribe        *SubRequest_Subscribe `protobuf:"bytes,3,opt,name=subscribe" json:"subscribe,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SubRequest) Reset()                    { *m = SubRequest{} }
func (m *SubRequest) String() string            { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()               {}
func (*SubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubRequest) GetType() SubRequest_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SubRequest_UNKNOWN
}

func (m *SubRequest) GetSubscribe() *SubRequest_Subscribe {
	if m != nil {
		return m.Subscribe
	}
	return nil
}

// Subscribes the scheduler with the master to receive events. A
// scheduler must send other calls only after it has received the
// SUBCRIBED event.
type SubRequest_Subscribe struct {
	// See the comments below on 'framework_id' on the semantics for
	// 'framework_info.id'.
	FrameworkInfo    *FrameworkInfo `protobuf:"bytes,1,req,name=framework_info,json=frameworkInfo" json:"framework_info,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SubRequest_Subscribe) Reset()                    { *m = SubRequest_Subscribe{} }
func (m *SubRequest_Subscribe) String() string            { return proto.CompactTextString(m) }
func (*SubRequest_Subscribe) ProtoMessage()               {}
func (*SubRequest_Subscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *SubRequest_Subscribe) GetFrameworkInfo() *FrameworkInfo {
	if m != nil {
		return m.FrameworkInfo
	}
	return nil
}

// *
// Describes a framework.
type FrameworkInfo struct {
	// Used to determine the Unix user that an executor or task should be
	// launched as.
	//
	// When using the MesosSchedulerDriver, if the field is set to an
	// empty string, it will automagically set it to the current user.
	//
	// When using the HTTP Scheduler API, the user has to be set
	// explicitly.
	User *string `protobuf:"bytes,1,req,name=user" json:"user,omitempty"`
	// Name of the framework that shows up in the Mesos Web UI.
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FrameworkInfo) Reset()                    { *m = FrameworkInfo{} }
func (m *FrameworkInfo) String() string            { return proto.CompactTextString(m) }
func (*FrameworkInfo) ProtoMessage()               {}
func (*FrameworkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FrameworkInfo) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *FrameworkInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// The response message containing the greetings
type SubReply struct {
	Response         *string `protobuf:"bytes,1,req,name=response" json:"response,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SubReply) Reset()                    { *m = SubReply{} }
func (m *SubReply) String() string            { return proto.CompactTextString(m) }
func (*SubReply) ProtoMessage()               {}
func (*SubReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubReply) GetResponse() string {
	if m != nil && m.Response != nil {
		return *m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*SubRequest)(nil), "mesos.SubRequest")
	proto.RegisterType((*SubRequest_Subscribe)(nil), "mesos.SubRequest.Subscribe")
	proto.RegisterType((*FrameworkInfo)(nil), "mesos.FrameworkInfo")
	proto.RegisterType((*SubReply)(nil), "mesos.SubReply")
	proto.RegisterEnum("mesos.SubRequest_Type", SubRequest_Type_name, SubRequest_Type_value)
}

func init() { proto.RegisterFile("mesos/scheduler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x8d, 0xc1, 0x49, 0xec, 0x31, 0x90, 0xed, 0xa8, 0x89, 0x28, 0xbd, 0x20, 0x1f, 0x2a, 0xd4,
	0x03, 0xad, 0x38, 0xb4, 0xaa, 0x7a, 0x22, 0x66, 0x48, 0xac, 0xb8, 0x86, 0xee, 0xda, 0xf4, 0x88,
	0x42, 0xba, 0xa8, 0x51, 0x01, 0xbb, 0x5e, 0xac, 0xca, 0xff, 0xd4, 0x4f, 0xeb, 0x47, 0x54, 0xbb,
	0x25, 0x84, 0x36, 0xb7, 0x99, 0xf7, 0xde, 0xcc, 0x3c, 0xcd, 0x83, 0xf3, 0xb5, 0x54, 0x99, 0x7a,
	0xa3, 0xee, 0xbe, 0xc9, 0xaf, 0xe5, 0x4a, 0x16, 0xfd, 0xbc, 0xc8, 0xb6, 0x19, 0x1e, 0x1b, 0xd8,
	0xff, 0x55, 0x07, 0x10, 0xe5, 0x82, 0xcb, 0x1f, 0xa5, 0x54, 0x5b, 0x7c, 0x0d, 0xf6, 0xb6, 0xca,
	0x65, 0xbb, 0xd6, 0xb5, 0x7a, 0xad, 0xc1, 0x45, 0xdf, 0x88, 0xfa, 0x8f, 0x82, 0x7e, 0x52, 0xe5,
	0x92, 0x1b, 0x0d, 0x7e, 0x00, 0x57, 0x95, 0x0b, 0x75, 0x57, 0xdc, 0x2f, 0x64, 0xbb, 0xde, 0xb5,
	0x7a, 0xde, 0xe0, 0xe5, 0xd3, 0x01, 0xf1, 0x20, 0xe1, 0x8f, 0xea, 0xce, 0x35, 0xb8, 0x7b, 0x1c,
	0x3f, 0x42, 0x6b, 0x59, 0xdc, 0xae, 0xe5, 0xcf, 0xac, 0xf8, 0x3e, 0xbf, 0xdf, 0x2c, 0xb3, 0xb6,
	0xd5, 0xad, 0xf5, 0xbc, 0xc1, 0xf3, 0xdd, 0xb2, 0xf1, 0x03, 0x19, 0x6e, 0x96, 0x19, 0x6f, 0x2e,
	0x0f, 0x5b, 0xff, 0xb7, 0x05, 0xb6, 0xf6, 0x84, 0x1e, 0x9c, 0xa6, 0xf1, 0x4d, 0x3c, 0xf9, 0x12,
	0xb3, 0x23, 0x6c, 0x82, 0x2b, 0xd2, 0x4b, 0x11, 0xf0, 0xf0, 0x92, 0x98, 0x85, 0x0d, 0x70, 0x12,
	0x1a, 0xf2, 0x91, 0x26, 0x6b, 0x08, 0x70, 0x32, 0x0c, 0x02, 0x9a, 0x26, 0xac, 0xae, 0xa7, 0x46,
	0x14, 0x44, 0x61, 0x4c, 0xcc, 0xc6, 0x17, 0x70, 0xfe, 0x97, 0x98, 0x87, 0xf1, 0x8c, 0xb8, 0xa0,
	0xf9, 0x64, 0x3c, 0x26, 0x2e, 0x58, 0x13, 0x3b, 0x70, 0xb1, 0xd3, 0xfd, 0xcf, 0xb5, 0xf4, 0x3e,
	0x4e, 0xb3, 0x70, 0x46, 0xec, 0x18, 0x1d, 0xb0, 0x6f, 0xc2, 0x28, 0x62, 0x27, 0xfa, 0xa6, 0xb8,
	0x4e, 0x13, 0x73, 0xf3, 0x14, 0xcf, 0xc0, 0x1b, 0x06, 0xda, 0x5d, 0x44, 0xa3, 0x2b, 0x62, 0x8e,
	0x76, 0xc8, 0x29, 0x98, 0xc4, 0x41, 0x18, 0x11, 0x73, 0xb5, 0x8f, 0x4f, 0x24, 0xc4, 0xf0, 0x8a,
	0x18, 0xe8, 0x86, 0xd3, 0xe7, 0x94, 0x44, 0xc2, 0x3c, 0xb3, 0x27, 0x9d, 0x4e, 0x39, 0x09, 0xc1,
	0x1a, 0xfe, 0x7b, 0x68, 0xfe, 0xf3, 0x0e, 0x44, 0xb0, 0x4b, 0x25, 0x0b, 0xf3, 0x32, 0x97, 0x9b,
	0x5a, 0x63, 0x9b, 0xdb, 0xb5, 0x0e, 0xd1, 0x60, 0xba, 0xf6, 0x5f, 0x81, 0x63, 0x42, 0xc9, 0x57,
	0x15, 0x76, 0xc0, 0x29, 0xa4, 0xca, 0xb3, 0x8d, 0x92, 0xbb, 0xb9, 0x7d, 0x3f, 0x08, 0x0e, 0x93,
	0x79, 0x07, 0x0d, 0x51, 0x2e, 0xf6, 0x07, 0xf1, 0xd9, 0x93, 0x78, 0x3b, 0x67, 0x87, 0x50, 0xbe,
	0xaa, 0xfc, 0xa3, 0xb7, 0xd6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x36, 0xb9, 0x1f, 0x73,
	0x02, 0x00, 0x00,
}
